

;-----------------------------------------------------------------
;
; KEY ( -- c ) 
TWIG 3, "KEY" 
KEY : 
 int KEY=
 COLON(0);
 BEGIN(1, QKEY);
 UNTIL(1, EXITT);

;-----------------------------------------------------------------
;
; WITHIN ( u ul uh -- t ) 
TWIG 6, "WITHIN" 
WITHI : 
 int WITHI=
 COLON(7, OVER, SUBBB, TOR, SUBBB, RFROM, ULESS, EXITT);

;-----------------------------------------------------------------
;
; >CHAR ( c -- c ) 
TWIG 5, ">CHAR" 
TCHAR : 
 int TCHAR=
 COLON(8, DOLIT, 0x7F, ANDD, DUPP, DOLIT, 127, BLANK, WITHI);
 IF(3, DROP, DOLIT, 0X5F);
 THEN(1, EXITT);

;-----------------------------------------------------------------
;
; ALIGNED ( b -- a ) 
TWIG 7, "ALIGNED" 
ALIGN : 
 int ALIGN=
 COLON(7, DOLIT, 3, PLUS, DOLIT, 0XFFFFFFFC, ANDD, EXITT);

;-----------------------------------------------------------------
;
; HERE ( -- a ) 
TWIG 4, "HERE" 
HERE : 
 int HERE=
 COLON(3, CP, AT, EXITT);

;-----------------------------------------------------------------
;
; PAD ( -- a ) 
TWIG 3, "PAD" 
PAD : 
 int PAD=
 COLON(5, HERE, DOLIT, 80, PLUS, EXITT);

;-----------------------------------------------------------------
;
; TIB ( -- a ) 
TWIG 3, "TIB" 
TIB : 
 int TIB=
 COLON(3, TTIB, AT, EXITT);

;-----------------------------------------------------------------
;
; @EXECUTE ( a -- ) 
TWIG 8, "@EXECUTE" 
ATEXE : 
 int ATEXE=
 COLON(2, AT, QDUP);
 IF(1, EXECU);
 THEN(1, EXITT);

;-----------------------------------------------------------------
;
; CMOVE ( b b u -- ) 
TWIG 5, "CMOVE" 
CMOVEE : 
 int CMOVEE=
 COLON(0);
 FOR(0);
 AFT(8, OVER, CAT, OVER, CSTOR, TOR, ONEP, RFROM, ONEP);
 THEN(0);
 NEXT(2, DDROP, EXITT);

;-----------------------------------------------------------------
;
; MOVE ( b b u -- ) 
TWIG 4, "MOVE" 
MOVE : 
 int MOVE=
 COLON(1, CELLD);
 FOR(0);
 AFT(8, OVER, AT, OVER, STORE, TOR, CELLP, RFROM, CELLP);
 THEN(0);
 NEXT(2, DDROP, EXITT);

;-----------------------------------------------------------------
;
; FILL ( b u c -- ) 
TWIG 4, "FILL" 
FILL : 
 int FILL=
 COLON(1, SWAP);
 FOR(1, SWAP);
 AFT(3, DDUP, CSTOR, ONEP);
 THEN(0);
 NEXT(2, DDROP, EXITT);

\ Number Conversions


;-----------------------------------------------------------------
;
; DIGIT ( u -- c ) 
TWIG 5, "DIGIT" 
DIGIT : 
 int DIGIT=
 COLON(12, DOLIT, 9, OVER, LESS, DOLIT, 7, ANDD, PLUS, DOLIT, 0X30, PLUS, EXITT);

;-----------------------------------------------------------------
;
; EXTRACT ( n base -- n c ) 
TWIG 7, "EXTRACT" 
EXTRC : 
 int EXTRC=
 COLON(7, DOLIT, 0, SWAP, UMMOD, SWAP, DIGIT, EXITT);

;-----------------------------------------------------------------
;
; <# ( -- ) 
TWIG 2, "<#" 
BDIGS : 
 int BDIGS=
 COLON(4, PAD, HLD, STORE, EXITT);

;-----------------------------------------------------------------
;
; HOLD ( c -- ) 
TWIG 4, "HOLD" 
HOLD : 
 int HOLD=
 COLON(8, HLD, AT, ONEM, DUPP, HLD, STORE, CSTOR, EXITT);

;-----------------------------------------------------------------
;
; # (dig) ( u -- u ) 
TWIG 1, "#" 
DIG : 
 int DIG=
 COLON(5, BASE, AT, EXTRC, HOLD, EXITT);

;-----------------------------------------------------------------
;
; #S (digs) ( u -- 0 ) 
TWIG 2, "#S" 
DIGS : 
 int DIGS=
 COLON(0);
 BEGIN(2, DIG, DUPP);
 WHILE(0);
 REPEAT(1, EXITT);

;-----------------------------------------------------------------
;
; SIGN ( n -- ) 
TWIG 4, "SIGN" 
SIGN : 
 int SIGN=
 COLON(1, ZLESS);
 IF(3, DOLIT, 0X2D, HOLD);
 THEN(1, EXITT);

;-----------------------------------------------------------------
;
; #> ( w -- b u ) 
TWIG 2, "#>" 
EDIGS : 
 int EDIGS=
 COLON(7, DROP, HLD, AT, PAD, OVER, SUBBB, EXITT);

;-----------------------------------------------------------------
;
; str ( n -- b u ) 
TWIG 3, "str" 
STRR : 
 int STRR=
 COLON(9, DUPP, TOR, ABSS, BDIGS, DIGS, RFROM, SIGN, EDIGS, EXITT);

;-----------------------------------------------------------------
;
; HEX ( -- ) 
TWIG 3, "HEX" 
HEXX : int HEXX=
 COLON(5, DOLIT, 16, BASE, STORE, EXITT);

;-----------------------------------------------------------------
;
; DECIMAL ( -- ) 
TWIG 7, "DECIMAL" 
DECIM : 
 int DECIM=
 COLON(5, DOLIT, 10, BASE, STORE, EXITT);

;-----------------------------------------------------------------
;
; wupper ( w -- w' ) 
TWIG 6, "wupper" 
UPPER : 
 int UPPER=
 COLON(4, DOLIT, 0x5F5F5F5F, ANDD, EXITT);

;-----------------------------------------------------------------
;
; >upper ( c -- UC ) 
TWIG 6, ">upper" 
TOUPP : 
 int TOUPP=
 COLON(6, DUPP, DOLIT, 0x61, DOLIT, 0x7B, WITHI);
 IF(3, DOLIT, 0x5F, ANDD);
 THEN(1, EXITT);

;-----------------------------------------------------------------
;
; DIGIT? ( c base -- u t ) 
TWIG 6, "DIGIT?" 
DIGTQ : 
 int DIGTQ=
 COLON(9, TOR, TOUPP, DOLIT, 0X30, SUBBB, DOLIT, 9, OVER, LESS);
 IF(8, DOLIT, 7, SUBBB, DUPP, DOLIT, 10, LESS, ORR);
 THEN(4, DUPP, RFROM, ULESS, EXITT);

;-----------------------------------------------------------------
;
; NUMBER? ( a -- n T | a F ) 
TWIG 7, "NUMBER?" 
NUMBQ : 
 int NUMBQ=
 COLON(12, BASE, AT, TOR, DOLIT, 0, OVER, COUNT, OVER, CAT, DOLIT, 0X24, EQUAL);
 IF(5, HEXX, SWAP, ONEP, SWAP, ONEM);
 THEN(13, OVER, CAT, DOLIT, 0X2D, EQUAL, TOR, SWAP, RAT, SUBBB, SWAP, RAT, PLUS, QDUP);
 IF(1, ONEM);
 FOR(6, DUPP, TOR, CAT, BASE, AT, DIGTQ);
 WHILE(7, SWAP, BASE, AT, STAR, PLUS, RFROM, ONEP);
 NEXT(2, DROP, RAT);
 IF(1, NEGAT);
 THEN(1, SWAP);
 ELSE(6, RFROM, RFROM, DDROP, DDROP, DOLIT, 0);
 THEN(1, DUPP);
 THEN(6, RFROM, DDROP, RFROM, BASE, STORE, EXITT);

\ Text Output


;-----------------------------------------------------------------
;
; SPACE ( -- ) 
TWIG 5, "SPACE" 
SPACE : 
 int SPACE=
 COLON(3, BLANK, EMIT, EXITT);

;-----------------------------------------------------------------
;
; CHARS ( +n c -- ) 
TWIG 5, "CHARS" 
CHARS : 
 int CHARS=
 COLON(4, SWAP, DOLIT, 0, MAX);
 FOR(0);
 AFT(2, DUPP, EMIT);
 THEN(0);
 NEXT(2, DROP, EXITT);

;-----------------------------------------------------------------
;
; SPACES ( +n -- ) 
TWIG 6, "SPACES" 
SPACS : 
 int SPACS=
 COLON(3, BLANK, CHARS, EXITT);

;-----------------------------------------------------------------
;
; TYPE ( b u -- ) 
TWIG 4, "TYPE" 
TYPES : 
 int TYPES=
 COLON(0);
 FOR(0);
 AFT(5, DUPP, CAT, TCHAR, EMIT, ONEP);
 THEN(0);
 NEXT(2, DROP, EXITT);

;-----------------------------------------------------------------
;
; CR ( -- ) 
TWIG 2, "CR" 
CR : 
 int CR=
 COLON(7, DOLIT, 10, DOLIT, 13, EMIT, EMIT, EXITT);

;-----------------------------------------------------------------
;
; do$ ( -- $adr ) 
TWIG 3, "do$" 
DOSTR : 
 int DOSTR=
 COLON(10, RFROM, RAT, RFROM, COUNT, PLUS, ALIGN, TOR, SWAP, TOR, EXITT);

;-----------------------------------------------------------------
;
; $”| ( -- a ) 
TWIG 3, "$\"|" 
STRQP : 
 int STRQP=
 COLON(2, DOSTR, EXITT);

;-----------------------------------------------------------------
;
; ”| ( -- ) 
TWIG 3, ".\"|" 
DOTQP : 
 int DOTQP=
 COLON(4, DOSTR, COUNT, TYPES, EXITT);

;-----------------------------------------------------------------
;
; .R ( u +n -- ) 
TWIG 2, ".R" 
DOTR : 
 int DOTR=
 COLON(8, TOR, STRR, RFROM, OVER, SUBBB, SPACS, TYPES, EXITT);

;-----------------------------------------------------------------
;
; U.R ( u +n -- ) 
TWIG 3, "U.R" 
UDOTR : 
 int UDOTR=
 COLON(10, TOR, BDIGS, DIGS, EDIGS, RFROM, OVER, SUBBB, SPACS, TYPES, EXITT);

;-----------------------------------------------------------------
;
; U. ( u -- ) 
TWIG 2, "U." 
UDOT : 
 int UDOT=
 COLON(6, BDIGS, DIGS, EDIGS, SPACE, TYPES, EXITT);

;-----------------------------------------------------------------
;
; . (dot) ( n -- ) 
TWIG 1, "." 
 DOT : 
 int DOT=
 COLON(5, BASE, AT, DOLIT, 10, XORR);
 IF(3, UDOT, EXITT);
 THEN(4, STRR, SPACE, TYPES, EXITT);

;-----------------------------------------------------------------
;
; ? ( a -- ) 
TWIG 1, "?" 
QUEST : 
 int QUEST=
 COLON(3, AT, DOT, EXITT);

\ Dictionary Search


;-----------------------------------------------------------------
;
; (parse) ( b1 u1 c --b2 u2 n ) 
TWIG 7, "(parse)" 
PARS : \t int PARS=
 COLON(5, TEMP, CSTOR, OVER, TOR, DUPP);
 IF(5, ONEM, TEMP, CAT, BLANK, EQUAL);
 IF(0);
 FOR(6, BLANK, OVER, CAT, SUBBB, ZLESS, INVER);
 WHILE(1, ONEP);
 NEXT(6, RFROM, DROP, DOLIT, 0, DUPP, EXITT);
 THEN(1, RFROM);
 THEN(2, OVER, SWAP);
 FOR(9, TEMP, CAT, OVER, CAT, SUBBB, TEMP, CAT, BLANK, EQUAL);
 IF(1, ZLESS);
 THEN(0);
 WHILE(1, ONEP);
 NEXT(2, DUPP, TOR);
 ELSE(5, RFROM, DROP, DUPP, ONEP, TOR);
 THEN(6, OVER, SUBBB, RFROM, RFROM, SUBBB, EXITT);
 THEN(4, OVER, RFROM, SUBBB, EXITT);

;-----------------------------------------------------------------
;
; PACK$ ( b u a -- a ) 
TWIG 5, "PACK$" 
PACKS : 
 int PACKS=
 COLON(18, DUPP, TOR, DDUP, PLUS, DOLIT, 0xFFFFFFFC, ANDD, DOLIT, 0, SWAP, STORE, D DUP, CSTOR, ONEP, SWAP, CMOVEE, RFROM, EXITT);

;-----------------------------------------------------------------
;
; PARSE ( c -- b u ; <string> ) 
TWIG 5, "PARSE" 
PARSE : 
 int PARSE=
 COLON(15, TOR, TIB, INN, AT, PLUS, NTIB, AT, INN, AT, SUBBB, RFROM, PARS, INN, PSTOR , EXITT);

;-----------------------------------------------------------------
;
; TOKEN ( -- a ;; <string> ) 
TWIG 5, "TOKEN" 
TOKEN : 
 int TOKEN=
 COLON(9, BLANK, PARSE, DOLIT, 0x1F, MIN, HERE, CELLP, PACKS, EXITT); PACK$ ;;

;-----------------------------------------------------------------
;
; WORD ( c -- a ; <string> ) 
TWIG 4, "WORD" 
WORDD : 
 int WORDD=
 COLON(5, PARSE, HERE, CELLP, PACKS, EXITT);

;-----------------------------------------------------------------
;
; NAME> ( nfa – cfa) 
TWIG 5, "NAME>" 
NAMET : 
 int NAMET=
 COLON(7, COUNT, DOLIT, 0x1F, ANDD, PLUS, ALIGN, EXITT);

;-----------------------------------------------------------------
;
; SAME? ( a1 a2 n – a1 a2 f) 
TWIG 5, "SAME?" 
SAMEQ : 
 int SAMEQ=
 COLON(4, DOLIT, 0x1F, ANDD, CELLD);
 FOR(0);
 AFT(18, OVER, RAT, DOLIT, 4, STAR, PLUS, AT, UPPER, OVER, RAT, DOLIT, 4, STAR, PLUS, AT, U PPER, SUBBB, QDUP);
 IF(3, RFROM, DROP, EXITT);
 THEN(0);
 THEN(0);
 NEXT(3, DOLIT, 0, EXITT);

;-----------------------------------------------------------------
;
; FIND ( a va --cfa nfa, a F) 
TWIG 4, "FIND" 
FIND : 
 int FIND=
 COLON(10, SWAP, DUPP, AT, TEMP, STORE, DUPP, AT, TOR, CELLP, SWAP);
 BEGIN(2, AT, DUPP);
 IF(9, DUPP, AT, DOLIT, 0xFFFFFF3F, ANDD, UPPER, RAT, UPPER, XORR);
 IF(3, CELLP, DOLIT, 0XFFFFFFFF);
 ELSE(4, CELLP, TEMP, AT, SAMEQ);
 THEN(0);
 ELSE(6, RFROM, DROP, SWAP, CELLM, SWAP, EXITT);
 THEN(0);
 WHILE(2, CELLM, CELLM);
 REPEAT(9, RFROM, DROP, SWAP, DROP, CELLM, DUPP, NAMET, SWAP, EXITT); 

\Interpreter


;-----------------------------------------------------------------
;
; NAME? ( a -- cfa na | a 0 ) 
TWIG 5, "NAME?" 
NAMEQ : 
 int NAMEQ=
 COLON(3, CNTXT, FIND, EXITT);

;-----------------------------------------------------------------
;
; EXPECT ( b u1 -- ) 
TWIG 6, "EXPECT" 
EXPEC : 
 int EXPEC=
 COLON(5, ACCEP, SPAN, STORE, DROP, EXITT);

;-----------------------------------------------------------------
;
; QUERY ( -- ) 
TWIG 5, "QUERY" 
QUERY : 
 int QUERY=
 COLON(12, TIB, DOLIT, 0X100, ACCEP, NTIB, STORE, DROP, DOLIT, 0, INN, STORE, EXITT);

;-----------------------------------------------------------------
;
; ABORT ( -- ) 
TWIG 5, "ABORT" 
ABORT : 
 int ABORT=
 COLON(4, NOP, TABRT, ATEXE, EXITT);

;-----------------------------------------------------------------
;
; abort”| ( f -- ) 
TWIG 6, "abort\"" 
ABORQP : 
 ABORQP=
 COLON(0);
 IF(4, DOSTR, COUNT, TYPES, ABORT);
 THEN(3, DOSTR, DROP, EXITT);

;-----------------------------------------------------------------
;
; ERROR ( a -- ) 
TWIG 5, "ERROR" 
ERRORR : 
 int ERRORR=
 COLON(8, SPACE, COUNT, TYPES, DOLIT, 0x3F, EMIT, CR, ABORT);

;-----------------------------------------------------------------
;
; $INTERPRET ( a -- ) 
TWIG 10, "$INTERPRET" 
$INTER : 
 int INTER=
 COLON(2, NAMEQ, QDUP);
 IF(4, CAT, DOLIT, COMPO, ANDD); ABORQ(" compile only"); int INTER0=LABEL(2, EXECU, EXITT);
 THEN(1, NUMBQ);
 IF(1, EXITT);
 THEN(1, ERRORR);

;-----------------------------------------------------------------
;
; [ (left-paren) ( -- ) 
TWIG IMEDD+1, "[" 
LBRAC : 
 int LBRAC=
 COLON(5, DOLIT, INTER, TEVAL, STORE, EXITT);

;-----------------------------------------------------------------
;
; .OK ( -- ) 
TWIG 3, ".OK" 
DOTOK : 
 int DOTOK=
 COLON(6, CR, DOLIT, INTER, TEVAL, AT, EQUAL);
 IF(14, TOR, TOR, TOR, DUPP, DOT, RFROM, DUPP, DOT, RFROM, DUPP, DOT, RFROM, DUPP, DOT); DOTQ(" ok>");
 THEN(1, EXITT);

;-----------------------------------------------------------------
;
; EVAL ( -- ) 
TWIG 4, "EVAL" 
EVAL : 
 int EVAL=
 COLON(1, LBRAC);
 BEGIN(3, TOKEN, DUPP, AT);
 WHILE(2, TEVAL, ATEXE);
 REPEAT(4, DROP, DOTOK, NOP, EXITT);

;-----------------------------------------------------------------
;
; QUIT ( -- ) 
TWIG 4, "QUIT" 
QUITT : 
 int QUITT=
 COLON(1, LBRAC);
 BEGIN(2, QUERY, EVAL); AGAIN(0);

;-----------------------------------------------------------------
;
; LOAD ( a n-- ) 
TWIG 4, "LOAD" 
LOAD : 
 int LOAD=
 COLON(10, NTIB, STORE, TTIB, STORE, DOLIT, 0, INN, STORE, EVAL, EXITT);

\ Compiler


;-----------------------------------------------------------------
;
; , (comma) ( w -- ) 
TWIG 1, ", " 
COMMA : int COMMA=
 COLON(7, HERE, DUPP, CELLP, CP, STORE, STORE, EXITT);

;-----------------------------------------------------------------
;
; LITERAL ( n -- ) 
TWIG IMEDD+7, "LITERAL" 
LITERAL : 
 int LITER=
 COLON(5, DOLIT, DOLIT, COMMA, COMMA, EXITT);

;-----------------------------------------------------------------
;
; ALLOT ( n -- ) 
TWIG 5, "ALLOT" 
ALLOT : 
 int ALLOT=
 COLON(4, ALIGN, CP, PSTOR, EXITT);

;-----------------------------------------------------------------
;
; $, ” ( -- ) 
TWIG 3, "$, \"" 
STRCQ : 
 int STRCQ=
 COLON(9, DOLIT, 0X22, WORDD, COUNT, PLUS, ALIGN, CP, STORE, EXITT);

;-----------------------------------------------------------------
;
; ?UNIQUE ( a -- a ) 
TWIG 7, "?UNIQUE" 
UNIQU : 
 int UNIQU=
 COLON(3, DUPP, NAMEQ, QDUP);
 IF(6, COUNT, DOLIT, 0x1F, ANDD, SPACE, TYPES); DOTQ(" reDef");
 THEN(2, DROP, EXITT);

;-----------------------------------------------------------------
;
; $, n ( a -- ) 
TWIG 3, "$, n" 
SNAME : 
 int SNAME=
 COLON(2, DUPP, AT);
 IF(14, UNIQU, DUPP, NAMET, CP, STORE, DUPP, LAST, STORE, CELLM, CNTXT, AT, SWAP, STORE, EXITT);
 THEN(1, ERRORR);

;-----------------------------------------------------------------
;
; ' (tick) ( -- cfa ) 
TWIG 1, "'" 
 TICK : 
 int TICK=
 COLON(2, TOKEN, NAMEQ);
 IF(1, EXITT);
 THEN(1, ERRORR);

;-----------------------------------------------------------------
;
; [COMPILE] ( -- ; <string> ) 
TWIG IMEDD+9, "[COMPILE]" 
BCOMP : 
 int BCOMP=
 COLON(3, TICK, COMMA, EXITT);

;-----------------------------------------------------------------
;
; COMPILE ( -- ) 
TWIG 7, "COMPILE" 
COMPI : 
 int COMPI=
 COLON(7, RFROM, DUPP, AT, COMMA, CELLP, TOR, EXITT);

;-----------------------------------------------------------------
;
; $COMPILE ( a -- ) 
TWIG 8, "$COMPILE" 
SCOMP : 
 int SCOMP=
 COLON(2, NAMEQ, QDUP);
 IF(4, AT, DOLIT, IMEDD, ANDD);
 IF(1, EXECU);
 ELSE(1, COMMA);
 THEN(1, EXITT);
 THEN(1, NUMBQ);
 IF(2, LITER, EXITT);
 THEN(1, ERRORR);

;-----------------------------------------------------------------
;
; OVERT ( -- ) 
TWIG 5, "OVERT" 
OVERT : 
 int OVERT=
 COLON(5, LAST, AT, CNTXT, STORE, EXITT);

;-----------------------------------------------------------------
;
; ] (right paren) ( -- ) 
TWIG 1, "]" 
 RBRAC : 
 int RBRAC=
 COLON(5, DOLIT, SCOMP, TEVAL, STORE, EXITT);

;-----------------------------------------------------------------
;
; : (colon) ( -- ; <string> ) 
TWIG 1, ":" 
COLN : 
 int COLN=
 COLON(7, TOKEN, SNAME, RBRAC, DOLIT, 0x6, COMMA, EXITT);

;-----------------------------------------------------------------
;
; ; (semi-colon) ( -- ) 
TWIG IMEDD+1, ";" 
SEMIS : 
 int SEMIS=
 COLON(6, DOLIT, EXITT, COMMA, LBRAC, OVERT, EXITT);

\ Debugging Tools


;-----------------------------------------------------------------
;
; dm+ ( b u – b+u ) 
TWIG 3, "dm+" 
DMP : 
 int DMP=
 COLON(4, OVER, DOLIT, 6, UDOTR);
 FOR(0);
 AFT(6, DUPP, AT, DOLIT, 9, UDOTR, CELLP);
 THEN(0);
 NEXT(1, EXITT);

;-----------------------------------------------------------------
;
; DUMP ( b u -- ) 
TWIG 4, "DUMP" 
DUMP : 
 int DUMP=
 COLON(10, BASE, AT, TOR, HEXX, DOLIT, 0x1F, PLUS, DOLIT, 0x20, SLASH);
 FOR(0);
 AFT(10, CR, DOLIT, 8, DDUP, DMP, TOR, SPACE, CELLS, TYPES, RFROM);
 THEN(0);
 NEXT(5, DROP, RFROM, BASE, STORE, EXITT);

;-----------------------------------------------------------------
;
; >NAME ( cfa -- nfa | F ) 
TWIG 5, ">NAME" 
TNAME : 
 int TNAME=
 COLON(1, CNTXT);
 BEGIN(2, AT, DUPP);
 WHILE(3, DDUP, NAMET, XORR);
 IF(1, ONEM);
 ELSE(3, SWAP, DROP, EXITT);
 THEN(0);
 REPEAT(3, SWAP, DROP, EXITT);

;-----------------------------------------------------------------
;
; .ID ( a -- ) 
TWIG 3, ".ID" 
DOTID : 
 int DOTID=
 COLON(7, COUNT, DOLIT, 0x1F, ANDD, TYPES, SPACE, EXITT);

;-----------------------------------------------------------------
;
; WORDS ( -- ) 
TWIG 5, "WORDS" 
WORDS : 
 int WORDS=
 COLON(6, CR, CNTXT, DOLIT, 0, TEMP, STORE);
 BEGIN(2, AT, QDUP);
 WHILE(9, DUPP, SPACE, DOTID, CELLM, TEMP, AT, DOLIT, 0x10, LESS);
 IF(4, DOLIT, 1, TEMP, PSTOR);
 ELSE(5, CR, DOLIT, 0, TEMP, STORE);
 THEN(0);
 REPEAT(1, EXITT);

;-----------------------------------------------------------------
;
; FORGET ( -- , <name>) 
TWIG 6, "FORGET" 
FORGET : 
 int FORGT=
 COLON(3, TOKEN, NAMEQ, QDUP);
 IF(12, CELLM, DUPP, CP, STORE, AT, DUPP, CNTXT, STORE, LAST, STORE, DROP, EXITT);
 THEN(1, ERRORR);

;-----------------------------------------------------------------
;
; COLD ( -- ) 
TWIG 4, "COLD" 
COLD : 
 int COLD=
 COLON(1, CR); DOTQ("esp32forth V5.4, 2019 "); int DOTQ1=LABEL(2, CR, EXITT);

\ Control Structures


;-----------------------------------------------------------------
;
; THEN ( A -- ) 
TWIG IMEDD+4, "THEN" 
THENN : 
 int THENN=
 COLON(4, HERE, SWAP, STORE, EXITT);

;-----------------------------------------------------------------
;
; FOR ( -- a ) 
TWIG IMEDD+3, "FOR" 
FOR : 
 int FORR=
 COLON(4, COMPI, TOR, HERE, EXITT);

;-----------------------------------------------------------------
;
; BEGIN ( -- a ) 
TWIG IMEDD+5, "BEGIN" 
BEGIN : 
 int BEGIN=
 COLON(2, HERE, EXITT);

;-----------------------------------------------------------------
;
; NEXT ( a -- ) 
TWIG IMEDD+4, "NEXT" 
NEXT : 
 int NEXT=
 COLON(4, COMPI, DONXT, COMMA, EXITT);

;-----------------------------------------------------------------
;
; UNTIL ( a -- ) 
TWIG IMEDD+5, "UNTIL" 
UNTIL : 
 int UNTIL=
 COLON(4, COMPI, QBRAN, COMMA, EXITT);

;-----------------------------------------------------------------
;
; AGAIN ( a -- ) 
TWIG IMEDD+5, "AGAIN" 
AGAIN : 
 int AGAIN=
 COLON(4, COMPI, BRAN, COMMA, EXITT);

;-----------------------------------------------------------------
;
; IF ( -- A ) 
TWIG IMEDD+2, "IF" 
IFF : 
 int IFF=
 COLON(7, COMPI, QBRAN, HERE, DOLIT, 0, COMMA, EXITT);

;-----------------------------------------------------------------
;
; AHEAD ( -- A ) 
TWIG IMEDD+5, "AHEAD" 
AHEAD : 
 int AHEAD=
 COLON(7, COMPI, BRAN, HERE, DOLIT, 0, COMMA, EXITT);

;-----------------------------------------------------------------
;
; REPEAT ( A a -- ) 
TWIG IMEDD+6, "REPEAT" 
REPEAT : 
 int REPEA=
 COLON(3, AGAIN, THENN, EXITT);

;-----------------------------------------------------------------
;
; AFT ( a -- a A ) 
TWIG IMEDD+3, "AFT" 
AFT : 
 int AFT=
 COLON(5, DROP, AHEAD, HERE, SWAP, EXITT);

;-----------------------------------------------------------------
;
; ELSE ( A -- A ) 
TWIG IMEDD+4, "ELSE" 
ELSE : 
 int ELSEE=
 COLON(4, AHEAD, SWAP, THENN, EXITT);

;-----------------------------------------------------------------
;
; WHILE ( a -- A a ) 
TWIG IMEDD+5, "WHILE" 
WHILE : 
 int WHILEE=
 COLON(3, IFF, SWAP, EXITT);

\ String Literals


;-----------------------------------------------------------------
;
; ABORT" ( -- ; <string> ) 
TWIG IMEDD+6, "ABORT\"" 
ABORT" : 
 int ABRTQ=
 COLON(6, DOLIT, ABORQP, HERE, STORE, STRCQ, EXITT);

;-----------------------------------------------------------------
;
; $" ( -- ; <string> ) 
TWIG IMEDD+2, "$\"" 
STRQ : 
 int STRQ=
 COLON(6, DOLIT, STRQP, HERE, STORE, STRCQ, EXITT);

;-----------------------------------------------------------------
;
; ." (dot-quot) ( -- ; <string> ) 
TWIG IMEDD+2, ".\"" 
DOTQQ : 
 int DOTQQ=
 COLON(6, DOLIT, DOTQP, HERE, STORE, STRCQ, EXITT);

\ Defining words


;-----------------------------------------------------------------
;
; CODE ( -- ; <string> ) 
TWIG 4, "CODE" 
CODE : 
 int CODE=
 COLON(5, TOKEN, SNAME, OVERT, ALIGN, EXITT);

;-----------------------------------------------------------------
;
; CREATE ( -- ; <string> ) 
TWIG 6, "CREATE" 
CREAT : 
 int CREAT=
 COLON(5, CODE, DOLIT, 0x203D, COMMA, EXITT);

;-----------------------------------------------------------------
;
; VARIABLE ( -- ; <string> ) 
TWIG 8, "VARIABLE" 
VARIA : 
 int VARIA=
 COLON(5, CREAT, DOLIT, 0, COMMA, EXITT);

;-----------------------------------------------------------------
;
; CONSTANT ( n -- ; <string> ) 
TWIG 8, "CONSTANT" 
CONST : 
 int CONST=
 COLON(6, CODE, DOLIT, 0x2004, COMMA, COMMA, EXITT);

\ Comments


;-----------------------------------------------------------------
;
; .( (dot-paren) ( -- ; <string> ) 
TWIG IMEDD+2, ".(" 
DOTPR : 
 int DOTPR=
 COLON(5, DOLIT, 0X29, PARSE, TYPES, EXITT);

;-----------------------------------------------------------------
;
; \ (back-slash) ( -- ; <string> ) 
TWIG IMEDD+1, "\\" 
BKSLA : 
 int BKSLA=
 COLON(5, DOLIT, 0xA, WORDD, DROP, EXITT);

;-----------------------------------------------------------------
;
; ( (paren) ( -- ; <string> ) 
TWIG IMEDD+1, "(" 
PAREN : 
 int PAREN=
 COLON(5, DOLIT, 0X29, PARSE, DDROP, EXITT);

\ Lexicon Bits


;-----------------------------------------------------------------
;
; COMPILE-ONLY ( -- ) 
TWIG 12, "COMPILE-ONLY" 
ONLY : 
 int ONLY=
 COLON(6, DOLIT, 0x40, LAST, AT, PSTOR, EXITT);

;-----------------------------------------------------------------
;
; IMMEDIATE ( -- ) 
TWIG 9, "IMMEDIATE" 
IMMED : 
 int IMMED=
 COLON(6, DOLIT, 0x80, LAST, AT, PSTOR, EXITT);

;-----------------------------------------------------------------


